# Generated by Django 4.0.2 on 2022-02-21 09:03

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion

def populate_quantity(apps, schema_editor):
    likeds = [50, 100, 250, 500, 1000, 2500, 5000, 10000]
    Quantity = apps.get_model('api', 'Quantity')
    for liked in likeds:
        obj = Quantity(count=liked)
        obj.save()

def populate_prduct_type(apps, schema_editor):
    types = [
        ["instagram", "Followers"],
        ["instagram", "Likes"],
        ["instagram", "Views"],
        ["instagram", "Impressions"],
        ["instagram", "Saves"],
        ["instagram", "Mentions"],
        ["instagram", "Comment Replies"],
        ["instagram", "Comments"],
        ["instagram", "Profile Visits"],
        ["instagram", "Post Reach"],
        ["instagram", "Story Poll Votes"],

        ["tiktok", "Followers"],
        ["tiktok", "Comments"],
        ["tiktok", "Likes"],
        ["tiktok", "Shares"],
        ["tiktok", "Views"],

        ["youtube", "Views"],
        ["youtube", "Likes"],
        ["youtube", "Subscribers"],
        ["youtube", "Favorites"],
        ["youtube", "Shares"],
        ["youtube", "Watch Time Hours"],
        ["youtube", "Dislikes"],
        ["youtube", "Comment Visits"],

        ["twitter", "Likes"],
        ["twitter", "Flowers"],
        ["twitter", "Views"],
        ["twitter", "Reviews"],
        ["twitter", "Group Members"],
        ["twitter", "Reactions"],
        ["twitter", "Attendes"],
        ["twitter", "Comment Replies"],
        ["twitter", "Comments"],
        ["twitter", "Shares"],
        ["twitter", "Poll Votes"],

        ["facebook", "Likes"],
        ["facebook", "Flowers"],
        ["facebook", "Views"],
        ["facebook", "Reviews"],
        ["facebook", "Group Members"],
        ["facebook", "Reactions"],
        ["facebook", "Attendes"],
        ["facebook", "Comment Replies"],
        ["facebook", "Comments"],
        ["facebook", "Shares"],
        ["facebook", "Poll Votes"],

        ["spotify", "Followers"],
        ["spotify", "Monthly Listeners"],
        ["spotify", "Plays"],
        ["spotify", "Pre Saves"],
        ["spotify", "Saves"],

        ["clubhouse", "Followers"],
        ["clubhouse", "Room Visitiors"],

        ["discord", "Members"],

        ["linkedin", "Followers"],
        ["linkedin", "Connections"],
        ["linkedin", "Recommendations"],
        ["linkedin", "Endorsements"],
        ["linkedin", "Employees"],
        ["linkedin", "Likes"],
        ["linkedin", "Comments"],
        ["linkedin", "Shares"],

        ["twitch", "Followers"],
        ["twitch", "Views"],

        ["pinterest", "Followers"],
        ["pinterest", "Repins"],
        ["pinterest", "Reactions"],

        ["Mixcloud", "Plays"],
        ["Mixcloud", "Followers"],

        ["Soundcloud", "Plays"],
        ["Soundcloud", "Followers"],
        ["Soundcloud", "Likes"],
        ["Soundcloud", "Comments"],
        ["Soundcloud", "Reposts"],

        ["Vimeo", "Views"],
        ["Vimeo", "Followers"],
        ["Vimeo", "Likes"],

        ["Dailymotion", "Views"],

        ["VK", "Friends"],
        ["VK", "Followers"],
        ["VK", "Group Members"],
        ["VK", "Likes"],
        ["VK", "Comments"],
        ["VK", "Shares"],

        ["Website Traffic", "Website Traffic"],

        ["Tumblr", "Followers"],
        ["Tumblr", "Reblogs"],
        ["Tumblr", "Likes"],

        ["Telegram", "Members"],
        ["Telegram", "Post Views"],
        ["Telegram", "Poll Votes"],

        ["Shazam", "Plays"],
        ["Shazam", "Followers"],

        ["Quora", "Followers"],
        ["Quora", "Upvotes"],
        ["Quora", "Shares"],
        ["Quora", "Comments"],
        ["Quora", "Views"],

        ["Google", "My Business Reviews"],
        ["Google", "Play Reviews"],

        ["Reddit", "Upvotes"],
        ["Reddit", "Subscribers"],
        ["Reddit", "Followers"],

        ["Sitejabber", "Reviews"],

        ["Trustpilot", "Reviews"],

        ["IMDb", "Ratings"],
        ["IMDb", "Reviews"],

        ["ReverbNation", "Plays"],
        ["ReverbNation", "Fans"],

        ["Datpiff", "Plays"],

        ["Snapchat", "Followers"],
        ["Snapchat", "Views"],

        ["Audiomack", "Plays"],
        ["Audiomack", "Likes"],

        ["Likee", "Followers"],
        ["Likee", "Likes"],

        ["Tripadvisor", "Reviews"],

        ["Pandora", "Plays"],

        ["Napster", "Plays"],
    ]

    ProductType = apps.get_model('api', 'ProductType')
    for value in types:
        obj = ProductType(media_type=value[0], name=value[1])
        obj.save()

class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_type', models.CharField(max_length=200)),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Quantity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField()),
                ('content', models.CharField(max_length=200)),
                ('product_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.producttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_url', models.CharField(max_length=200)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.country')),
                ('product_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.producttype')),
                ('quantity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.quantity')),
            ],
        ),
        migrations.CreateModel(
            name='FollowersType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('product_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.producttype')),
            ],
        ),
        migrations.RunPython(populate_quantity),
        migrations.RunPython(populate_prduct_type),
    ]
